#! /usr/bin/perl -w
#
# Probe for downloading list of URLs
# Copyright (c) 2010 Emir Imamagic
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

use warnings;
use strict;
use Monitoring::Plugin;
use LWP::UserAgent;
use URI;
use File::Basename;
use HTTP::Status;

# Standard variables used in Monitoring::Plugin constructor
use constant PROGNAME => "download_files";
use constant VERSION => '1.0';
use constant DESCRIPTION => 'Probe for downloading list of URLs.';
use constant EXTRA_DESC => "";
use constant LICENSE => 'This nagios plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
   http://www.apache.org/licenses/LICENSE-2.0
Copyright 2009 Emir Imamagic';
use constant SHORTNAME => 'Download Files';
use constant USAGE => "usage: $0 [ -v ] \n";
use constant DEFAULT_DIR => '/var/spool/nagios/nagios-plugins-igtf';

# Create Monitoring::Plugin instance
my $plugin = Monitoring::Plugin->new (usage => USAGE,
                                  shortname => SHORTNAME,
                                  version => VERSION,
                                  blurb => DESCRIPTION,
                                  extra => EXTRA_DESC,
                                  license => LICENSE,
                                  plugin  => PROGNAME);
$plugin->add_arg(
    spec => 'output-dir=s',
    help => "   Directory where files will be stored.
   (default: ".DEFAULT_DIR.")",
    required => 0,
    default => DEFAULT_DIR,
);
$plugin->add_arg(
    spec => 'download-list=s',
    help => "   List of URLs that will be downloaded.",
    required => 1
);

$plugin->getopts;

# Just in case of problems, let's not hang Nagios
local $SIG{'ALRM'} = sub {
    $plugin->nagios_die("Plugin hit the timeout.");
};

local $SIG{TERM} = sub {
    $plugin->nagios_die("Plugin received TERM signal.");
};

alarm($plugin->opts->timeout);

my $dir = $plugin->opts->get('output-dir');
my $status = OK;
my $output = '';
my $mtime = time;
my @okUrls;

unless (-d $dir) {
    my $res = `/bin/mkdir -p $dir 2>&1`;
    if ($?) {
        $plugin->nagios_exit(CRITICAL, "Output directory $dir does not exist. Creating $dir failed.");
    }
}

my $ua = LWP::UserAgent->new(env_proxy=>1);
$ua->agent(PROGNAME .'/'.VERSION);

foreach my $url (split(',',$plugin->opts->get('download-list'))) {
    my $filename;
    $filename = URI->new($url)->path;
    if ($filename) {
        $filename = $dir . '/' . basename($filename);
    } else {
        $status = UNKNOWN;
        $output .= "Extracting filename from URL $url failed. ";
        next;
    }
    my $res = $ua->get($url);
    if (!$res->is_success) {
        $status = WARNING;
        $output .= "Getting $url failed: ".$res->status_line . ". ";
        next;
    }
    unless (open(STD, ">$filename")) {
        $status = WARNING;
        $output .= "Cannot open file $filename. ";
        next;
    }
    print STD $res->content;
    unless (close(STD)) {
        $status = WARNING;
        $output .= "Cannot close file $filename. ";
        next;
    }
    push @okUrls, "$url";
}

$output .= "\nURLs downloaded: @okUrls" if (@okUrls);
$plugin->nagios_exit($status, $output);

