#! /usr/bin/perl -w
# nagios: -epn
#
# Probe for checking IGTF CA certificates distribution version and consistency
# Copyright (c) 2006 Emir Imamagic
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# script checks the following:
#  - checks that the version in CA .info is consistent with package list
#  - checks that all CA files from package list (package-list-url) exist
#  - checks that obsolete CAs (obsolete-list-url) do not exist
#  - compares CA file fingerprints with .info file
#  - checks if any additional CA files exist
#  - checks if CA has .info but misses certificate file

use warnings;
use strict;
use Monitoring::Plugin;
use XML::Simple;
use LWP::UserAgent;
use HTTP::Date;

# Standard variables used in Monitoring::Plugin constructor
use constant PROGNAME => "check_ca_dist";
use constant VERSION => '1.0';
use constant DESCRIPTION => 'Probe for checking IGTF CA certificates distribution version and consistency.';
use constant EXTRA_DESC => "";
use constant LICENSE => 'This nagios plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
   http://www.apache.org/licenses/LICENSE-2.0
Copyright 2009 Emir Imamagic';
use constant SHORTNAME => 'CA DIST';
use constant USAGE => "usage: $0 [ -v ] \n";
use constant DEFAULT_CA_DIR => '/etc/grid-security/certificates/';
use constant DEFAULT_RELEASE_FILE_URL => 'http://repository.egi.eu/sw/production/cas/1/current/meta/ca-policy-egi-core.release';
use constant DEFAULT_PACKAGE_LIST_URL => 'http://repository.egi.eu/sw/production/cas/1/current/meta/ca-policy-egi-core.list';
use constant DEFAULT_OBSOLETE_LIST_URL => 'http://repository.egi.eu/sw/production/cas/1/current/meta/ca-policy-egi-core.obsoleted';
use constant DEFAULT_FILE_AGE => 24;

sub getFileContent {
    my $ua = shift;
    my $url = shift;
    my $msg = shift;
    my $fileAge = shift;
    my $content;
    if ($url =~ /^http:\/\//) {
        my $req = HTTP::Request->new(GET => $url);
        my $res = $ua->request($req);
        if (!$res->is_success) {
            return (UNKNOWN, "Could not get $msg ($url): ".$res->status_line);
        }
        $content = $res->content;
    } else {
        return (UNKNOWN, "File $url does not exist") unless (-f $url);

        # check the file age
        if ($fileAge) {
            my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
                   $atime,$mtime,$ctime,$blksize,$blocks) = stat($url);
            if ($mtime) {
                if ((time() - $mtime) > ($fileAge*3600)) {
                    return (UNKNOWN, "File $msg is older than $fileAge hour(s)");
                }
            } else {
                return (UNKNOWN, "Could not get $msg file age");
            }
        }

        local($/) = undef;
        return (UNKNOWN, "Could not open $msg file $url") unless (open(STD, $url));
        $content = <STD>;
        return (UNKNOWN, "Could not close $msg file $url") unless (close(STD));
    }
    return (OK, $content);
}

# get the release;
sub getRelease {
    my $ua = shift;
    my $url = shift;
    my $fileAge = shift;
    my $releaseDate;
    my $releaseVersion;
    my ($status, $content) = getFileContent($ua, $url, "release XML", $fileAge);

    return ($status, $content) if ($status != OK);

    # parse the relase XML
    my $doc;
    eval {
        $doc = XMLin($content);
    };
    if ($@) {
        return (UNKNOWN, "Error parsing release XML file: $@");
    }

    # this is the expected output
    # <Release>
    #   <Date>28/10/2010</Date>
    #   <Version>1.37-2</Version>
    if (ref $doc eq 'HASH') {
        if ($doc->{Date}) {
            $releaseDate = str2time($doc->{Date});
            return (UNKNOWN, "Release date cannot be converted with HTTP::Date: $doc->{Date}.") unless ($releaseDate);
        } else {
            return (UNKNOWN, "Release XML file does not contain tag Date.");
        }
        if ($doc->{Version}) {
            if ($doc->{Version} =~ /((\d+?)\.(\d+?))\-(\d+?)/) {
                $releaseVersion = $1;
            } else {
                return(UNKNOWN, "Release version has incorrect format: $doc->{Version}.");
            }
        } else {
            return (UNKNOWN, "Release XML file does not contain tag Version.");
        }
    } else {
        return (UNKNOWN, "Release XML file does not contain tag Release.");
    }

    return(OK, $releaseDate, $releaseVersion);
}

# get the list of packages
# ca_AAACertificateServices-1.37-1
sub getPackagesList {
    my $ua = shift;
    my $url = shift;
    my $policyFilesCA = shift;
    my $fileAge = shift;
    my ($status, $content) = getFileContent($ua, $url, "list of packages", $fileAge);

    return ($status, $content) if ($status != OK);

    foreach my $line (split('\n',$content)) {
        if ($line =~ /^ca_(\S.+)-([0-9\.]+)-\d+$/) {
            my ($caName, $caVersion) = ($1, $2);
            next if ($caName =~ /^policy/);
            $policyFilesCA->{$caName} = $caVersion;
        }
    }
    return OK;
}

sub getNumVersion {
    my $version = shift;
    if ($version =~ /(\d+)\.(\d+)/) {
        return ($1*10000 + $2);
    } else {
        return;
    }
}

sub compareCAVersion {
    my $infoVersion = shift;
    my $releaseVersion = shift;
    my $releaseDate = shift;
    my $warning = shift;
    my $critical = shift;
    my $infoVersionNum = getNumVersion($infoVersion);
    return (UNKNOWN, "Installed version has incorrect format: $infoVersion") unless($infoVersionNum);
    my $releaseVersionNum = getNumVersion($releaseVersion);
    return (UNKNOWN, "Release version has incorrect format: $releaseVersion") unless ($releaseVersionNum);

    if ($infoVersionNum gt $releaseVersionNum) {
        return (OK, "Distribution version is newer than the official ($infoVersion).");
    }
    my $diff = sprintf ("%.2f", (time() - $releaseDate) / 86400);
    if ($diff >= $critical) {
        return(CRITICAL, "Old CA distribution version found ($infoVersion), new version is $diff days old.");
    } elsif ($diff >= $warning) {
        return(WARNING, "Old CA distribution version found ($infoVersion), new version is $diff days old.");
    } elsif ($diff > 0) {
        return(OK, "Old CA distribution version found ($infoVersion), new version is $diff days old. We're still within grace period.");
    } else {
        return(OK, "Valid CA distribution version found ($infoVersion). New version will be released in ".-$diff." days.");
    }
}

sub getSHA1Fingerprint {
    my $certFile = shift;
    my $useOpenssl = shift;

    if ($useOpenssl) {
        my $cmd = "/usr/bin/openssl x509 -in $certFile -fingerprint -noout -sha1";
        my $fingerprint;
        my $line = "";
        if (!open(CMDFD, "$cmd |")) {
            return (CRITICAL, "error executing command $cmd");
        }
        foreach $line (<CMDFD>) {
            if ($line =~ /^\S.+?=([0-9A-F:]+)/) {
                $fingerprint = $1;
            }
        }
        if (!close(CMDFD)) {
            return (CRITICAL, "error executing command $cmd");
        }
        if ($fingerprint) {
            return (OK, $fingerprint);
        } else {
            return (CRITICAL, "openssl returned incorrect fingerprint string: $line");
        }
    } else {
        my $x509;
        eval {
            require Crypt::OpenSSL::X509;
            $x509 = Crypt::OpenSSL::X509->new_from_file($certFile);
        };
        if ($@) {
            return (CRITICAL, $@);
        }
        return (OK, $x509->fingerprint_sha1());
    }
}

# Create Monitoring::Plugin instance
my $plugin = Monitoring::Plugin->new (usage => USAGE,
                                  shortname => SHORTNAME,
                                  version => VERSION,
                                  blurb => DESCRIPTION,
                                  extra => EXTRA_DESC,
                                  license => LICENSE,
                                  plugin  => PROGNAME);
$plugin->add_arg(
    spec => 'ca-dir=s',
    help => "   Directory where CAs are installed.
   (default: \$X509_CERT_DIR, ".DEFAULT_CA_DIR.")",
    required => 0,
    default => DEFAULT_CA_DIR
);
$plugin->add_arg(
    spec => 'release-url=s',
    help => "   URL or path of release XML file. Multiple values shuold be comma separated.
   (default: ".DEFAULT_RELEASE_FILE_URL.")",
    required => 0,
    default => DEFAULT_RELEASE_FILE_URL
);
$plugin->add_arg(
    spec => 'package-list-url=s',
    help => "   URL or path of packages list. Multiple values shuold be comma separated.
   (default: ".DEFAULT_PACKAGE_LIST_URL.")",
    required => 0,
    default => DEFAULT_PACKAGE_LIST_URL
);
$plugin->add_arg(
    spec => 'obsolete-list-url=s',
    help => "   URL or path of obsoleted CAs which shouldn't be installed.
   Multiple values shuold be comma separated.
   (default: ".DEFAULT_OBSOLETE_LIST_URL.")",
    required => 0,
    default => DEFAULT_OBSOLETE_LIST_URL
);
$plugin->add_arg(
    spec => 'file-age=i',
    help => "   Maximum age of file (in hours) in case when path is used for
   release-url, package-list-url and obsolete-list-url. If files are
   older they will be ignored. Set to 0 for infinite.
   (default: ".DEFAULT_FILE_AGE.")",
    required => 0,
    default => DEFAULT_FILE_AGE
);
$plugin->add_arg(
    spec => 'use-openssl',
    help => "   If set, probe will use direct openssl command to get SHA1
   fingerprint. Set option in order to avoid use of perl module
   Crypt::OpenSSL::X509 (e.g. when executed on WN).
   (default: not set)",
    required => 0
);
$plugin->add_arg(
    spec => 'warning|w=i',
    help => "   Warning threshold for CA distribution age (days).\n   (default: 3)",
    required => 0,
    default => 3
);
$plugin->add_arg(
    spec => 'critical|c=i',
    help => "   Critical threshold for CA distribution age (days).\n   (default: 8)",
    required => 0,
    default => 8
);

$plugin->getopts;

# Just in case of problems, let's not hang Nagios
local $SIG{'ALRM'} = sub {
    $plugin->nagios_die("Plugin hit the timeout.");
};

local $SIG{TERM} = sub {
    $plugin->nagios_die("Plugin received TERM signal.");
};

alarm($plugin->opts->timeout);

# load plugin parameters to local variables
my $policyFilesCA = {};
my $obsoleteFilesCA = {};
my $fileList = {};
my $obsoleteCAs = {};
my $unknownCAs = {};
my $incorrectSHA1 = {};
my $incorrectVersion = {};
my $missingCA = {};
my $releaseDate;
my $releaseVersion;
my $output = "";
my $finalOutput = "";
my $status;
my $skipDetailedPackages;
my $versionChecked;
my $caDir;

$caDir = $plugin->opts->get('ca-dir');
unless ($caDir) {
    if ($ENV{X509_CERT_DIR}) {
        $caDir = $ENV{X509_CERT_DIR};
    } else {
        $caDir = DEFAULT_CA_DIR;
    }
}

unless (-d $caDir) {
    $plugin->nagios_exit(CRITICAL, "CA directory does not exist ".$caDir);
}

my $ua = LWP::UserAgent->new(env_proxy=>1);
$ua->agent(PROGNAME .'/'.VERSION);

# get the release
$status = UNKNOWN;
foreach my $url (split(',',$plugin->opts->get('release-url'))) {
    ($status, $releaseDate, $releaseVersion) = getRelease($ua, $url, $plugin->opts->get('file-age'));
    last if ($status == OK);
}
if ($status == OK) {
    $finalOutput .= "The official version is $releaseVersion. ";
} else {
    $plugin->nagios_die("Unable to get official version and date. $releaseDate");
}

# get list of valid CA packages
$status = UNKNOWN;
$output = "";
foreach my $url (split(',',$plugin->opts->get('package-list-url'))) {
    ($status, $output) = getPackagesList($ua, $url, $policyFilesCA, $plugin->opts->get('file-age'));
    last if ($status == OK);
}
if ($status != OK) {
    $output = " (error: $output)" if ($output);
    $finalOutput .= "Unable to get a list of CA packages".$output.". Installed CA list check will be skipped. ";
    undef $policyFilesCA;
} 

# get list of obsoleted CA packages
$status = UNKNOWN;
$output = "";
foreach my $url (split(',',$plugin->opts->get('obsolete-list-url'))) {
    ($status, $output) = getPackagesList($ua, $url, $obsoleteFilesCA, $plugin->opts->get('file-age'));
    last if ($status == OK);
}
if ($status != OK) {
    $output = " (error: $output)" if ($output);
    $finalOutput .= "Unable to get a list of obsolete CA packages".$output.". Obsolete CA list check will be skipped. ";
    undef $obsoleteFilesCA;
}

# get names of all .info files
foreach my $file (glob($caDir.'/*.info')) {
    $fileList->{$file} = 1;
}

# iterate through all installed CAs
$status = OK;
foreach my $certFile (keys %$fileList) {
    my ($infoVersion, $infoSHA1, $infoAlias);
    # we assume this is site's problem and make it critical
    unless(open(STD, $certFile)) {
        $status = CRITICAL;
        $finalOutput .= "CA info file $certFile cannot be opened. Stopping analysis.";
        $skipDetailedPackages = 1;
        last;
    }
    while (<STD>) {
        if (/\s*?alias\s+=\s+(\S.+?)\s/) {
            $infoAlias = $1;
        } elsif (/\s*?version\s+=\s+(\S+)/) {
            $infoVersion = $1;
        } elsif (/\s*?sha1fp.0\s+=\s+(\S+)/) {
            $infoSHA1 = $1;
        }
    }
    unless(close(STD)) {
        $status = CRITICAL;
        $finalOutput .= "CA info file $certFile cannot be closed. Stopping analysis.";
        $skipDetailedPackages = 1;
        last;
    }

    # incorrect format of file
    next if (!$infoVersion || !$infoAlias || !$infoSHA1);

    # try to check installed version on official package if possible
    #
    # comment:
    # - if this particular CA has incorrect version, probe will return critical
    # - if it has correct and some other CA has incorrect version, probe will
    # also return critical
    #
    # only problem is if we don't have list of official packages
    # probe might hit some CA with old version (e.g. manually installed
    # worthless CA)
    if (!(defined $policyFilesCA) ||
        (defined $policyFilesCA && exists $policyFilesCA->{$infoAlias})) {
        # check installed version only once
        if (!$versionChecked) {
            $finalOutput .= "Using $infoAlias to get CA distribution version. ";
            if ($infoVersion ne $releaseVersion) {
                ($status, $output) = compareCAVersion($infoVersion, $releaseVersion, 
                                                      $releaseDate, $plugin->opts->warning,
                                                      $plugin->opts->critical);
                $finalOutput .= $output;
                $skipDetailedPackages = 1;
                last;
            } else {
                $versionChecked = 1;
            }
        }
    }

    # check if we have list of CAs and if the CA should exist
    if (defined $policyFilesCA && exists $policyFilesCA->{$infoAlias}) {
        # check CA version
        if ($policyFilesCA->{$infoAlias} ne $infoVersion) {
            $incorrectVersion->{$infoAlias} = $infoVersion;
        }
        # remove CA from list of known CAs
        delete $policyFilesCA->{$infoAlias};
    }
    if (defined $obsoleteFilesCA && exists $obsoleteFilesCA->{$infoAlias}) {
        $obsoleteCAs->{$infoAlias} = $infoVersion;
        # skip SHA1 analysis of obsolete CAs
        next;
    } 

    # SHA1 check
    $certFile =~ s/.info$/.pem/;
    unless (-f $certFile) {
        $missingCA->{$infoAlias} = 1;
        next;
    }
    my $fingerprint;
    ($status, $fingerprint) = getSHA1Fingerprint($certFile, $plugin->opts->get('use-openssl'));
    if ($status != OK) {
        $finalOutput .= "Failed calculating SHA1 on $certFile: $fingerprint.";
        $skipDetailedPackages = 1;
        last;
    }
    if ($fingerprint ne $infoSHA1) {
        $incorrectSHA1->{$infoAlias} = 1;
    }
}

# In depth analysis performed only if installation is up2date
if (!$skipDetailedPackages) {
    my @CAs;
    if (defined $policyFilesCA) {
        @CAs = keys %$policyFilesCA;
        if (@CAs) {
            $status = OK;
            $finalOutput .= "The following CAs are not installed: @CAs. ";
        }
    }
    if (defined $obsoleteFilesCA) {
        @CAs = keys %$obsoleteCAs;
        if (@CAs) {
            $status = CRITICAL;
            $finalOutput .= "The following obsolete CAs should not be installed: @CAs. ";
        }
    }
    @CAs = keys %$incorrectVersion;
    if (@CAs) {
        $status = CRITICAL;
        $finalOutput .= "The following CAs have incorrect version: @CAs. ";
    }
    # TODO:
    # once SRCE SHA1 is fixed switch this to CRITICAL
    @CAs = keys %$incorrectSHA1;
    if (@CAs) {
        $status = CRITICAL;
        $finalOutput .= "The following CAs have incorrect SHA1 fingerprint: @CAs. ";
    }
    @CAs = keys %$missingCA;
    if (@CAs) {
        $status = OK;
        $finalOutput .= "The following CAa have info file but CA certificate files is missing: @CAs. ";
    }
}

$finalOutput .= "CA distribution is correctly installed." if (!$skipDetailedPackages && $status == OK);
$plugin->nagios_exit($status, $finalOutput);
